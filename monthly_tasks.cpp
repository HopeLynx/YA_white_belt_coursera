/*
У каждого из нас есть повторяющиеся ежемесячные дела, каждое из которых нужно выполнять в конкретный день каждого месяца:
оплата счетов за электричество, абонентская плата за связь и пр. Вам нужно реализовать работу со списком таких дел на месяц,
а именно, реализовать набор следующих операций:

ADD i s
Назначить дело с названием s на день i текущего месяца.

DUMP i
Вывести все дела, запланированные на день i текущего месяца.

NEXT
Перейти к списку дел на новый месяц. При выполнении данной команды вместо текущего (старого) списка дел на текущий месяц создаётся и
становится активным (новый) список дел на следующий месяц: все дела со старого списка дел копируются в новый список.
После выполнения данной команды новый список дел и следующий месяц становятся текущими, а работа со старым списком дел прекращается.
При переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах:

если следующий месяц имеет больше дней, чем текущий, «дополнительные» дни необходимо оставить пустыми (не содержащими дел);
если следующий месяц имеет меньше дней, чем текущий, дела со всех «лишних» дней необходимо переместить на последний день следующего месяца.

Замечания
Историю списков дел хранить не требуется, работа ведется только с текущим списком дел текущего месяца.
Более того, при создании списка дел на следующий месяц, он «перетирает» предыдущий список.
Обратите внимание, что количество команд NEXT в общей последовательности команд при работе со списком дел может превышать 11.
Начальным текущим месяцем считается январь.
Количества дней в месяцах соответствуют Григорианскому календарю с той лишь разницей, что в феврале всегда 28 дней.

Формат ввода
Сначала число операций Q, затем описания операций.
Названия дел s уникальны и состоят только из латинских букв, цифр и символов подчёркивания. Номера дней i являются целыми числами и нумеруются от 1 до размера текущего месяца.

Формат вывода
Для каждой операции типа DUMP в отдельной строке выведите количество дел в соответствующий день, а затем их названия, разделяя их пробелом.
Порядок вывода дел в рамках каждой операции значения не имеет.
*/

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

// 1 31 2 28 3 31 4 30 5 31 6 30 7 31 8 31 9 30 10 31 11 30 12 31

int current_month = 0;
const vector<int> days_in_month = {31,28,31,30,31,30,31,31,30,31,30,31};
void next_month(){current_month++; current_month %= 12;}

void add_cmd(vector<vector<string>>& v, int k, string s){
    v[k].push_back(s);
}

void dump_cmd(const vector<vector<string>>& v, int k){
    cout << v[k].size() << " ";
    for (auto it : v[k]) cout << it << " ";
    cout << endl;
}

void next_cmd(vector<vector<string>>& v){
    next_month();
    int tmp = days_in_month[current_month] - v.size();
    if (tmp > 0){
        v.resize(days_in_month[current_month]);
    } else if (tmp < 0){
        for (auto it = v.end()+tmp;it != v.end();it++){
            (*(v.end()+tmp-1)).insert((*(v.end()+tmp-1)).end(),(*it).begin(),(*it).end());
        }
        v.resize(days_in_month[current_month]);
    }
}

int main(){
    int n; cin >> n; vector<vector<string>> v;
    v.resize(days_in_month[current_month]);
    for(int i = 0; i < n; i++){
        string cmd; cin >> cmd; int tmp; string s;
        if (cmd == "ADD"){cin >> tmp >> s; add_cmd(v,tmp-1,s);}
        else if (cmd == "NEXT") {next_cmd(v);}
        else if (cmd == "DUMP"){cin >> tmp; dump_cmd(v,tmp-1);}
    }
    return 0;
}
